<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <!--base-package配置需要扫描的基类包，默认情况下会扫描该基类包下所有的类。如果希望扫描特定的类而非基包下的所有类，则可以加上 resource-pattern属性-->
    <context:component-scan base-package="com.smart.dao" resource-pattern="Impl/*.class"/>
    <context:component-scan base-package="com.smart.service.Impl"/>
    
    <!-- 配置数据源 -->
    <!--方式一:直接配置用户名密码-->
	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
		p:driverClassName="com.mysql.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3306/sampledb"
		p:username="root"
		p:password="123456" />-->

    <!--方式二：使用外部配置文件。好处是：减少维护的工作量，使部署更简单-->
    <!--1:引入jdbc.properties属性文件-->
    <!--<bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer"
    p:location="classpath:com/smart/jdbc.properties"
    p:fileEncoding="UTF-8"/>-->
    <!--改用具有加密功能的PropertyOverrideConfigurer。是自己重写了PropertyOverrideConfigurer类的方法-->
    <bean class="com.smart.Utils.EncryptPropertyPlaceholderConfigurer"
          p:location="classpath:com/smart/jdbc.properties"
          p:fileEncoding="UTF-8"/>
    <!--也可以使用<context:property-placeholder>引用属性文件-->
    <!--<context:property-placeholder
            location="classpath:com/smart/jdbc.properties" file-encoding="utf8"/>-->
    <!--2:通过属性名引用属性值-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
    destroy-method="close"
    p:driverClassName="${driverClassName}"
    p:url="${url}"
    p:username="${username}"
    p:password="${password}"/>

	<!-- 配置Jdbc模板  -->
	<bean id="jdbcTemplate " class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" />
		
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression="(execution(* com.smart.service..*(..))) and (@annotation(org.springframework.transaction.annotation.Transactional))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
</beans>
